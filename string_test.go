// Code generated by github.com/schigh/slice/base/base.go. DO NOT EDIT.
package slice

import (
	"errors"
	"reflect"
	"strings"
	"sync/atomic"
	"testing"
)

func TestString_IndexOf(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name     string
		slc      []string
		needle   string
		expected int
	}{
		{
			name:     "only item",
			slc:      []string{"foo"},
			needle:   "foo",
			expected: 0,
		},
		{
			name:     "at index 1",
			slc:      []string{"foo", "bar", "bar"},
			needle:   "bar",
			expected: 1,
		},
		{
			name:     "missing",
			slc:      []string{"foo", "bar", "fizz", "buzz"},
			needle:   "baz",
			expected: NotInSlice,
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			result := String(tt.slc).IndexOf(tt.needle)
			if result != tt.expected {
				t.Errorf("expected %d, got %d", tt.expected, result)
			}
		})
	}
}

func TestString_Contains(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name     string
		slc      []string
		needle   string
		expected bool
	}{
		{
			name:     "present",
			slc:      []string{"foo", "bar", "fizz", "buzz"},
			needle:   "buzz",
			expected: true,
		},
		{
			name:     "not present",
			slc:      []string{"foo", "bar", "fizz", "buzz"},
			needle:   "baz",
			expected: false,
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			result := String(tt.slc).Contains(tt.needle)
			if result != tt.expected {
				t.Errorf("expected %v, got %v", tt.expected, result)
			}
		})
	}
}

func TestString_SortAsc(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name     string
		slc      []string
		expected []string
	}{
		{
			name:     "empty",
			slc:      []string{},
			expected: []string{},
		},
		{
			name:     "already sorted",
			slc:      []string{"bar", "baz", "buzz", "fizz", "foo"},
			expected: []string{"bar", "baz", "buzz", "fizz", "foo"},
		},
		{
			name:     "reversed",
			slc:      []string{"foo", "fizz", "buzz", "baz", "bar"},
			expected: []string{"bar", "baz", "buzz", "fizz", "foo"},
		},
		{
			name:     "random",
			slc:      []string{"foo", "bar", "fizz", "buzz", "baz"},
			expected: []string{"bar", "baz", "buzz", "fizz", "foo"},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			result := String(tt.slc).SortAsc().Value()
			if !reflect.DeepEqual(tt.expected, result) {
				t.Errorf("expected %v, got %v", tt.expected, result)
			}
		})
	}
}

func TestString_SortDesc(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name     string
		slc      []string
		expected []string
	}{
		{
			name:     "empty",
			slc:      []string{},
			expected: []string{},
		},
		{
			name:     "already sorted",
			slc:      []string{"foo", "fizz", "buzz", "baz", "bar"},
			expected: []string{"foo", "fizz", "buzz", "baz", "bar"},
		},
		{
			name:     "reversed",
			slc:      []string{"bar", "baz", "buzz", "fizz", "foo"},
			expected: []string{"foo", "fizz", "buzz", "baz", "bar"},
		},
		{
			name:     "random",
			slc:      []string{"foo", "bar", "fizz", "buzz", "baz"},
			expected: []string{"foo", "fizz", "buzz", "baz", "bar"},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			result := String(tt.slc).SortDesc().Value()
			if !reflect.DeepEqual(tt.expected, result) {
				t.Errorf("expected %v, got %v", tt.expected, result)
			}
		})
	}
}

func TestString_Unique(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name     string
		slc      []string
		expected []string
	}{
		{
			name:     "unaffected",
			slc:      []string{"foo", "bar", "fizz", "buzz", "baz"},
			expected: []string{"foo", "bar", "fizz", "buzz", "baz"},
		},
		{
			name:     "one extra buzz",
			slc:      []string{"foo", "bar", "fizz", "buzz", "baz", "buzz"},
			expected: []string{"foo", "bar", "fizz", "buzz", "baz"},
		},
		{
			name:     "extras everywhere",
			slc:      []string{"foo", "foo", "bar", "foo", "bar", "fizz", "fizz", "fizz", "buzz", "foo", "buzz", "baz", "fizz", "buzz", "baz", "baz", "fizz", "bar", "foo"},
			expected: []string{"foo", "bar", "fizz", "buzz", "baz"},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			result := String(tt.slc).Unique().Value()
			if !reflect.DeepEqual(tt.expected, result) {
				t.Errorf("expected %v, got %v", tt.expected, result)
			}
		})
	}
}

func TestString_Reverse(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name     string
		slc      []string
		expected []string
	}{
		{
			name:     "even length",
			slc:      []string{"foo", "bar", "baz", "fizz", "buzz"},
			expected: []string{"buzz", "fizz", "baz", "bar", "foo"},
		},
		{
			name:     "odd length",
			slc:      []string{"foo", "bar", "baz", "fizz", "buzz", "herp"},
			expected: []string{"herp", "buzz", "fizz", "baz", "bar", "foo"},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			result := String(tt.slc).Reverse().Value()
			if !reflect.DeepEqual(tt.expected, result) {
				t.Errorf("expected %v, got %v", tt.expected, result)
			}
		})
	}
}

func TestString_Filter(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name       string
		slc        []string
		expected   []string
		filterFunc func(string) bool
	}{
		{
			name:       "starts with f",
			slc:        []string{"foo", "bar", "baz", "fizz", "buzz"},
			expected:   []string{"foo", "fizz"},
			filterFunc: func(s string) bool { return len(s) > 0 && s[0] == 'f' },
		},
		{
			name:     "contains x",
			slc:      []string{"max", "foo", "xray", "homer", "boxy", "blue"},
			expected: []string{"max", "xray", "boxy"},
			filterFunc: func(s string) bool {
				for i := 0; i < len(s); i++ {
					if s[i] == 'x' {
						return true
					}
				}
				return false
			},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			result := String(tt.slc).Filter(tt.filterFunc).Value()
			if !reflect.DeepEqual(tt.expected, result) {
				t.Errorf("expected %v, got %v", tt.expected, result)
			}
		})
	}
}

func TestString_Each(t *testing.T) {
	t.Parallel()

	var rabbit atomic.Value
	rabbit.Store(string(""))

	tests := []struct {
		name     string
		slc      []string
		expected string
		eachFunc func(string)
	}{
		{
			name:     "concat",
			slc:      []string{"abc", "def", "ghi", "jkl", "mno", "pqr"},
			expected: "abcdefghijklmnopqr",
			eachFunc: func(n string) {
				v := rabbit.Load().(string)
				v = v + n
				rabbit.Store(v)
			},
		},
		{
			name:     "prepend",
			slc:      []string{"aa", "bb", "cc", "dd", "ee"},
			expected: "eeddccbbaaabcdefghijklmnopqr",
			eachFunc: func(n string) {
				v := rabbit.Load().(string)
				v = n + v
				rabbit.Store(v)
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			String(tt.slc).Each(tt.eachFunc)
			v := rabbit.Load().(string)
			if tt.expected != v {
				t.Errorf("expected %s, got %s", tt.expected, rabbit)
			}
		})
	}
}

func TestString_TryEach(t *testing.T) {
	t.Parallel()

	var rabbit atomic.Value
	rabbit.Store(string(""))

	myErr := errors.New("i am an error")
	tests := []struct {
		name      string
		slc       []string
		expected  int
		expected2 error
		before    func()
		eachFunc  func(string) error
	}{
		{
			name:      "concat",
			slc:       []string{"abc", "def", "ghi", "jkl", "mno", "pqr"},
			expected:  NotInSlice,
			expected2: nil,
			eachFunc: func(n string) error {
				v := rabbit.Load().(string)
				v = v + n
				rabbit.Store(v)
				return nil
			},
		},
		{
			name:      "prepend",
			slc:       []string{"aa", "bb", "cc", "dd", "ee"},
			expected:  NotInSlice,
			expected2: nil,
			eachFunc: func(n string) error {
				v := rabbit.Load().(string)
				v = n + v
				rabbit.Store(v)
				return nil
			},
		},
		{
			name:      "errors",
			slc:       []string{"aa", "bb", "cc", "dd", "ee"},
			expected:  3,
			expected2: myErr,
			before:    func() { rabbit.Store(string("")) },
			eachFunc: func(n string) error {
				v := rabbit.Load().(string)
				if len(v) >= 6 {
					return myErr
				}
				v = n + v
				rabbit.Store(v)
				return nil
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			if tt.before != nil {
				tt.before()
			}
			e, i := String(tt.slc).TryEach(tt.eachFunc)
			if tt.expected != e {
				t.Errorf("expected %v, got %v", tt.expected, e)
			}
			if tt.expected2 != i {
				t.Errorf("expected %v, got %v", tt.expected2, i)
			}
		})
	}
}

func TestString_IfEach(t *testing.T) {
	t.Parallel()

	var rabbit atomic.Value
	rabbit.Store(string(""))

	tests := []struct {
		name      string
		slc       []string
		expected  int
		expected2 bool
		before    func()
		eachFunc  func(string) bool
	}{
		{
			name:      "all return true",
			slc:       []string{"aa", "bb", "cc", "dd", "ee"},
			expected:  NotInSlice,
			expected2: true,
			eachFunc: func(n string) bool {
				v := rabbit.Load().(string)
				v = v + n
				rabbit.Store(v)
				return true
			},
		},
		{
			name:      "subtract n",
			slc:       []string{"aa", "bb", "cc", "dd", "ee"},
			expected:  NotInSlice,
			expected2: true,
			eachFunc: func(n string) bool {
				v := rabbit.Load().(string)
				v = n + v
				rabbit.Store(v)
				return true
			},
		},
		{
			name:      "breaking",
			slc:       []string{"aa", "bb", "cc", "dd", "ee"},
			expected:  3,
			expected2: false,
			before:    func() { rabbit.Store(string("")) },
			eachFunc: func(n string) bool {
				v := rabbit.Load().(string)
				if len(v) >= 6 {
					return false
				}
				v = n + v
				rabbit.Store(v)
				return true
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			if tt.before != nil {
				tt.before()
			}
			e, i := String(tt.slc).IfEach(tt.eachFunc)
			if tt.expected != e {
				t.Errorf("expected %v, got %v", tt.expected, e)
			}
			if tt.expected2 != i {
				t.Errorf("expected %v, got %v", tt.expected2, i)
			}
		})
	}
}

func TestString_Map(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name     string
		slc      []string
		expected []string
		mapFunc  func(string) string
	}{
		{
			name:     "replace vowels",
			slc:      []string{"cats", "dogs", "fish", "birds", "lizards", "mice"},
			expected: []string{"cXts", "dXgs", "fXsh", "bXrds", "lXzXrds", "mXcX"},
			mapFunc: func(n string) string {
				if strings.ContainsAny(n, "aeiou") {
					// hacky!
					n = strings.Replace(
						strings.Replace(
							strings.Replace(
								strings.Replace(
									strings.Replace(n, "a", "X", -1),
									"e", "X", -1,
								),
								"i", "X", -1,
							),
							"o", "X", -1,
						),
						"u", "X", -1,
					)
				}
				return n
			},
		},
		{
			name:     "lowercase",
			slc:      []string{"AbCdE", "aaa", "DDD", "ABx", "12AS"},
			expected: []string{"abcde", "aaa", "ddd", "abx", "12as"},
			mapFunc:  strings.ToLower,
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			String(tt.slc).Map(tt.mapFunc)
			if !reflect.DeepEqual(tt.expected, tt.slc) {
				t.Errorf("expected %v, got %v", tt.expected, tt.slc)
			}
		})
	}
}

func TestString_Chunk(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name     string
		size     int
		slc      []string
		expected [][]string
	}{
		{
			name:     "chunks of 2 no remainder",
			size:     2,
			slc:      []string{"foo", "bar", "baz", "fizz", "buzz", "beez"},
			expected: [][]string{[]string{"foo", "bar"}, []string{"baz", "fizz"}, []string{"buzz", "beez"}},
		},
		{
			name:     "chunks of 2 with remainder",
			size:     2,
			slc:      []string{"foo", "bar", "baz", "fizz", "buzz", "beez", "booz"},
			expected: [][]string{[]string{"foo", "bar"}, []string{"baz", "fizz"}, []string{"buzz", "beez"}, []string{"booz"}},
		},
		{
			name:     "chunks of 100",
			size:     100,
			slc:      []string{"foo", "bar", "baz", "fizz", "buzz", "beez", "booz"},
			expected: [][]string{[]string{"foo", "bar", "baz", "fizz", "buzz", "beez", "booz"}},
		},
		{
			name:     "chunks of 4",
			size:     4,
			slc:      []string{"foo", "bar", "baz", "fizz", "buzz", "beez", "booz"},
			expected: [][]string{[]string{"foo", "bar", "baz", "fizz"}, []string{"buzz", "beez", "booz"}},
		},
		{
			name:     "chunks of 5",
			size:     5,
			slc:      []string{"foo", "bar", "baz", "fizz", "buzz", "beez", "booz"},
			expected: [][]string{[]string{"foo", "bar", "baz", "fizz", "buzz"}, []string{"beez", "booz"}},
		},
		{
			name:     "empty slice",
			size:     5,
			slc:      []string{},
			expected: [][]string{},
		},
		{
			name:     "invalid chunk size",
			size:     -1,
			slc:      []string{"foo", "bar", "baz", "fizz", "buzz", "beez", "booz"},
			expected: [][]string{},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			out := String(tt.slc).Chunk(tt.size)
			if !reflect.DeepEqual(tt.expected, out) {
				t.Errorf("expected %v, got %v", tt.expected, tt.slc)
			}
		})
	}
}

func BenchmarkString_IndexOf(b *testing.B) {
	benchmarks := []struct {
		name string
		slc  []string
	}{
		{
			name: "10 elements",
			slc:  genString(b, 10),
		},
		{
			name: "100 elements",
			slc:  genString(b, 100),
		},
		{
			name: "1000 elements",
			slc:  genString(b, 1000),
		},
		{
			name: "10000 elements",
			slc:  genString(b, 10000),
		},
		{
			name: "100000 elements",
			slc:  genString(b, 100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				String(bm.slc).IndexOf("a")
			}
		})
	}
}

func BenchmarkString_Contains(b *testing.B) {
	benchmarks := []struct {
		name string
		slc  []string
	}{
		{
			name: "10 elements",
			slc:  genString(b, 10),
		},
		{
			name: "100 elements",
			slc:  genString(b, 100),
		},
		{
			name: "1000 elements",
			slc:  genString(b, 1000),
		},
		{
			name: "10000 elements",
			slc:  genString(b, 10000),
		},
		{
			name: "100000 elements",
			slc:  genString(b, 100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				String(bm.slc).Contains("a")
			}
		})
	}
}

func BenchmarkString_SortAsc(b *testing.B) {
	benchmarks := []struct {
		name string
		slc  []string
	}{
		{
			name: "10 elements",
			slc:  genString(b, 10),
		},
		{
			name: "100 elements",
			slc:  genString(b, 100),
		},
		{
			name: "1000 elements",
			slc:  genString(b, 1000),
		},
		{
			name: "10000 elements",
			slc:  genString(b, 10000),
		},
		{
			name: "100000 elements",
			slc:  genString(b, 100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				String(bm.slc).SortAsc()
			}
		})
	}
}

func BenchmarkString_SortDesc(b *testing.B) {
	benchmarks := []struct {
		name string
		slc  []string
	}{
		{
			name: "10 elements",
			slc:  genString(b, 10),
		},
		{
			name: "100 elements",
			slc:  genString(b, 100),
		},
		{
			name: "1000 elements",
			slc:  genString(b, 1000),
		},
		{
			name: "10000 elements",
			slc:  genString(b, 10000),
		},
		{
			name: "100000 elements",
			slc:  genString(b, 100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				String(bm.slc).SortDesc()
			}
		})
	}
}

func BenchmarkString_Reverse(b *testing.B) {
	benchmarks := []struct {
		name string
		slc  []string
	}{
		{
			name: "10 elements",
			slc:  genString(b, 10),
		},
		{
			name: "100 elements",
			slc:  genString(b, 100),
		},
		{
			name: "1000 elements",
			slc:  genString(b, 1000),
		},
		{
			name: "10000 elements",
			slc:  genString(b, 10000),
		},
		{
			name: "100000 elements",
			slc:  genString(b, 100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				String(bm.slc).Reverse()
			}
		})
	}
}

func BenchmarkString_Filter(b *testing.B) {
	benchFunc := func(n string) bool {
		return true
	}
	benchmarks := []struct {
		name string
		slc  []string
	}{
		{
			name: "10 elements",
			slc:  genString(b, 10),
		},
		{
			name: "100 elements",
			slc:  genString(b, 100),
		},
		{
			name: "1000 elements",
			slc:  genString(b, 1000),
		},
		{
			name: "10000 elements",
			slc:  genString(b, 10000),
		},
		{
			name: "100000 elements",
			slc:  genString(b, 100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				String(bm.slc).Filter(benchFunc)
			}
		})
	}
}

func BenchmarkString_Each(b *testing.B) {
	benchFunc := func(n string) { n = "" }
	benchmarks := []struct {
		name string
		slc  []string
	}{
		{
			name: "10 elements",
			slc:  genString(b, 10),
		},
		{
			name: "100 elements",
			slc:  genString(b, 100),
		},
		{
			name: "1000 elements",
			slc:  genString(b, 1000),
		},
		{
			name: "10000 elements",
			slc:  genString(b, 10000),
		},
		{
			name: "100000 elements",
			slc:  genString(b, 100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				String(bm.slc).Each(benchFunc)
			}
		})
	}
}

func BenchmarkString_Map(b *testing.B) {
	benchFunc := func(n string) string {
		return n
	}
	benchmarks := []struct {
		name string
		slc  []string
	}{
		{
			name: "10 elements",
			slc:  genString(b, 10),
		},
		{
			name: "100 elements",
			slc:  genString(b, 100),
		},
		{
			name: "1000 elements",
			slc:  genString(b, 1000),
		},
		{
			name: "10000 elements",
			slc:  genString(b, 10000),
		},
		{
			name: "100000 elements",
			slc:  genString(b, 100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				String(bm.slc).Map(benchFunc)
			}
		})
	}
}

func BenchmarkString_Unique(b *testing.B) {
	benchmarks := []struct {
		name string
		slc  []string
	}{
		{
			name: "10 elements",
			slc:  genString(b, 10),
		},
		{
			name: "100 elements",
			slc:  genString(b, 100),
		},
		{
			name: "1000 elements",
			slc:  genString(b, 1000),
		},
		{
			name: "10000 elements",
			slc:  genString(b, 10000),
		},
		{
			name: "100000 elements",
			slc:  genString(b, 100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				String(bm.slc).Unique()
			}
		})
	}
}
